//
//  RationalTests.swift
//  BigNumberTests
//
//  Created by Spizzace on 3/5/18.
//  Copyright Â© 2018 SpaiceMaine. All rights reserved.
//

import XCTest
import BigNumber

class RationalTests: XCTestCase {

    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    func testExample() {
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
    }

    func testPerformanceExample() {
        // This is an example of a performance test case.
        self.measure {
            // Put the code you want to measure the time of here.
        }
    }
    
    func testRationalToString() {
        var str = ""
        str = Rational(1,7).toFloatString(decimalPlaces: 10)
        XCTAssertEqual("0.1428571428", str, "(1/7)[10].toFloatString failed")
        
        str = Rational(1,999).toFloatString(decimalPlaces: 9)
        XCTAssertEqual("0.001001001", str, "(1/999)[9].toFloatString failed")
        
        str = Rational(1,689).toFloatString(decimalPlaces: 22)
        XCTAssertEqual("0.0014513788098693759071", str, "(1/689)[22].toFloatString failed")
        
        str = Rational(1,748).toFloatString(decimalPlaces: 22)
        XCTAssertEqual("0.0013368983957219251336", str, "(1/748)[22].toFloatString failed")
        
        let number_str = "15938055936309170651110951470986544805752178756182838003504668507411711725136768353261947594985149916480302833050807472818204459025376163589579454494141748846403572718747931548990296487966562708389585973469918681277916336888953657875171073345371240636044056891931183266848996252604689764444044968266289971194487884571979411681163467063968826916538916643432626188619055535783117993410503040239000131960027531427703766404629949551598615513466751906096634640959300684132808078279355992770606567984968076883025090108241637601587440418627629408443932348819005136796136386813180008249909063640424838013347775907690749368653414032217674402189489977710185283861997827158689480120664094317442623427092032348967126895335675260714641969306162250604203592480698684230461543609634538197487078448944875110881387309889669112894277939448948155663202020392392270012503305506435222669151745535050576071036979090766135639534110708296202077801581114466768306894922233780452851421274399275483708849707481298094221527446918570754674782969891502267186712958776567113116960399277608750386978788975586765001/91074605350338118006348294119923113175726735749616217162883820042352638429352962018639700542772285237030301903038600681792005575953678215266996755625869787432273790225279796264574189392827288135200752003920659418203488785308013483318515831679595815476591510812347656028680303846558948276240706757526230383483341865679940156332110303744838251700351191110218133779021298662382625905675375103671537111838160893598173145759067817651004226393049537042357811043714715579559230977481043857693305026106281118921478682172907814935494823025430192501020468713617028933314776198591643012780536092878391581911620971636697037915068040206234198361316693405106142575219833771240856448633736394330478495176768653634730954760962755521434839262369852193526882832659806944558352893947139801038561966327414725737942389001333458706573319864045260586352616621735700917318189488515593852111815450359322001321518429793599465584755472595613487164797448904922584137256141254342166333413535631394627677717976422463815229724800183099737604557606176743364387028779046065012948516337240276650499473743655049625600"
        let number = Rational(number_str)!
        str = number.toFloatString(decimalPlaces: 12)
        XCTAssertEqual("0.175000000000", str, "(BigRational)[12].toFloatString failed")
        
    }

}
